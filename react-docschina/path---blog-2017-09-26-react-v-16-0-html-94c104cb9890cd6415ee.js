webpackJsonp([97130754134062],{817:function(a,t){a.exports={data:{markdownRemark:{html:'<p>我们非常激动地宣布 React v16.0 发布了！这些变更包含了一些存在已久的特性，包括<a href="#new-render-return-types-fragments-and-strings"><strong>碎片（fragments）</strong></a>，<a href="#better-error-handling"><strong>错误边界</strong></a>，<a href="#portals"><strong>portals</strong></a>，支持<a href="#support-for-custom-dom-attributes"><strong>自定义 DOM 属性</strong></a>，提升[<strong>服务端渲染</strong>]以及<a href="#reduced-file-size"><strong>减小库的大小</strong></a>。</p>\n<h3 id="新的渲染返回类型：碎片和字符串"><a href="#%E6%96%B0%E7%9A%84%E6%B8%B2%E6%9F%93%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%EF%BC%9A%E7%A2%8E%E7%89%87%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新的渲染返回类型：碎片和字符串</h3>\n<p>现在你可以从组件的渲染方法中返回一个包含元素的数组。类似于其他数组，但你需要为每一个元素添加key以避免警告：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// No need to wrap list items in an extra element!</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>\n    <span class="token comment">// Don\'t forget the keys :)</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>First item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Second item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Third item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>未来，我们很可能会给 JSX 增加一种不需要 key 的特殊碎片语法。</p>\n<p>我们也添加了对返回字符串的支持：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">\'Look ma, no spans!\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><a href="/docs/react-component.html#render">查看完整的支持的返回类型列表</a>。</p>\n<h3 id="更好的错误处理"><a href="#%E6%9B%B4%E5%A5%BD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更好的错误处理</h3>\n<p>之前，渲染时的运行错误会使得 React 进入错误状态，生成加密的错误信息并需要页面进行刷新。为处理这一问题， React 16 使用了更具弹性的错误处理策略。默认情况下，若错误在组件内的渲染或生命周期方法被抛出，整个组件从根开始都不会渲染。这阻止了错误信息的显示。然而，其也可能不是理想的用户体验。</p>\n<p>你可以使用错误边界，而非每次出现错误时卸载整个应用。错误边界是用以在子树内部捕获错误并在其位置展示回退 UI 的特殊组件。可以认为错误边界类似于 try-catch 语句，但针对 React 组件。</p>\n<p>更多细节，查看我们<a href="/blog/2017/07/26/error-handling-in-react-16.html">之前的关于 React 16 的错误处理的文章</a>。</p>\n<h3 id="portals"><a href="#portals" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Portals</h3>\n<p>Portals 提供了一种很好的将子节点渲染到父组件以外的 DOM 节点的方式。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// React does *not* create a new div. It renders the children into `domNode`.</span>\n  <span class="token comment">// `domNode` is any valid DOM node, regardless of its location in the DOM.</span>\n  <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span>\n    domNode<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>可以在 <a href="/docs/portals.html">关于 portals 的文档</a> 查看完成的例子。</p>\n<h3 id="更好的服务端渲染"><a href="#%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更好的服务端渲染</h3>\n<p>React 16 包含了一个完全重写的服务端渲染器。其是真的快。支持<strong>流</strong>，因此你能够更快地将数据发送到客户端。同时由于<a href="#reduced-file-size">新的打包策略</a> 即编译不再进行 <code class="gatsby-code-text">process.env</code> 检查（不论你相信与否，在 Node 中读取 <code class="gatsby-code-text">process.env</code> 是真的慢！），你不再需要打包React以获得良好的服务端渲染性能。</p>\n<p>核心团队成员 Sasha Aickin 写了一篇<a href="https://medium.com/@aickin/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67">不错的描述 React 16 服务端渲染的提升</a>。根据 Sasha 的综合的基准测试，React 16 的服务端渲染要比 React 15 快大概<strong>三倍</strong>。“与带有 <code class="gatsby-code-text">process.env</code> 编译后 React 15 比较，在 Node 4 下大约有 2.4x 的性能提升，在 Node 6 下大概有 3.x 的性能提升，在新发布的 Node 8.4下有 3.8x 的性能提升。若与未编译的 React 15进行比较，在最新版本的 Node下，React 16 在服务端渲染有一整个量级的增益！”（根据 Sasha 指出，请注意这些数字是基于综合的基准测试得出的并不一定能反映出真实的性能。）</p>\n<p>此外，一旦到达客户端，React 16 更擅长于保留服务端的HTML。其不再要求初始渲染完全匹配服务端的渲染结果。相反，其会尝试尽可能重用现有的 DOM 元素。不再进行 checksums 校验！通常来讲，我们不推荐在客户端渲染和服务端不同的内容，但在某些情况是有用的（例如：时间戳）。</p>\n<p>查看<a href="/docs/react-dom-server.html">关于 <code class="gatsby-code-text">ReactDOMServer</code> 的文档</a> 了解更多细节。</p>\n<h3 id="支持自定义-dom-属性"><a href="#%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89-dom-%E5%B1%9E%E6%80%A7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>支持自定义 DOM 属性</h3>\n<p>React 现在会<a href="https://facebook.github.io/react/blog/2017/09/08/dom-attributes-in-react-16.html">将自定义属性传递给 DOM</a>，而不是忽略不认识的 HTML 和 SVG 属性。这使得我们能够不必在维护的 React 特性的白名单，并能够减少文件体积。</p>\n<h3 id="减少文件体积"><a href="#%E5%87%8F%E5%B0%91%E6%96%87%E4%BB%B6%E4%BD%93%E7%A7%AF" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>减少文件体积</h3>\n<p>除了这些外，React 16 确实要小于 15.6.1！</p>\n<ul>\n<li><code class="gatsby-code-text">react</code> 从20.7kb（gzip 后：6.9 kb）减至大小为 5.3 kb（gzip 后：2.2 kb）。</li>\n<li><code class="gatsby-code-text">react-dom</code> 从141 kb（gzip 后：42.9 kb）减至 103.7 kb（gzip 后：32.6 kb）。</li>\n<li><code class="gatsby-code-text">react</code> + <code class="gatsby-code-text">react-dom</code> 从 161.7 kb（gzip 后：49.8 kb）减至 109 kb（gzip 后：34.8 kb）</li>\n</ul>\n<p>二者结合<strong>相较于之前的版本体积减少了32%（gzip 后30%）。</strong></p>\n<p>体积的差异主要因为包的变化。React 现在使用 <a href="https://rollupjs.org/">Rollup</a> 来进行扁平化的打包以处理不同目标格式，而这使得体积和性能都有了提高。扁平化的包格式也意味着 React 对包的体积大小影响大致一直，无论你如何运行你的应用程序，无论是使用 Webpack、Browserify 还是预构建的 UMD 包或其他系统。</p>\n<h3 id="mit-协议"><a href="#mit-%E5%8D%8F%E8%AE%AE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MIT 协议</h3>\n<p><a href="https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/">以防你错过</a>，React 16 使用 MIT 协议。我们也为那些无法立刻升级的人在 MIT 协议下发布了 React 15.6.2。</p>\n<h3 id="新核心架构"><a href="#%E6%96%B0%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新核心架构</h3>\n<p>React 16 是第一个从顶层采用全新的核心架构的版本，代号 “Fiber”。你可以在<a href="https://code.facebook.com/posts/1716776591680069/react-16-a-look-inside-an-api-compatible-rewrite-of-our-frontend-ui-library/">Facebook 的工程博客</a>上了解这一项目。（Spoiler：我们重写了 React！）</p>\n<p>Fiber 负责大部分 React 16 里的新特性，例如错误边界和 fragments。而在接下来的几个版本中，你可以期待我们解锁更多 React 的潜在特性。</p>\n<p>可能目前我们的工作最为激动的领域是 <strong>异步渲染</strong> - 一种周期性地对浏览器执行调度渲染工作的策略。结果如下，通过异步渲染，应用能够更好的响应，因为 React 避免阻塞了主线程。</p>\n<p>这一示例为异步渲染可以解决的问题提供了一个先导（译注：即异步渲染可以解决什么样的问题）：</p>\n<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">有考虑过什么是 &quot;异步渲染&quot;？这有一个 Demo 展示了如何在无 React 下协调异步 React 树工作。\n<a href="https://t.co/3snoahB3uV">https://t.co/3snoahB3uV</a>\n<a href="https://t.co/egQ988gBjR">pic.twitter.com/egQ988gBjR</a></p>&mdash; Andrew Clark (@acdlite) <a href="https://twitter.com/acdlite/status/909926793536094209">September 18, 2017</a></blockquote>\n<p><em>提示：留意旋转的黑色方块。</em></p>\n<p>我们认为异步渲染是一次大动作，并代表了 React 的未来。为保证尽可能平稳地迁移到 v16.0，我们目前仍并没有支持异步特性，但我们非常期待能在接下来几个月将他们推出。保持关注！</p>\n<h2 id="安装"><a href="#%E5%AE%89%E8%A3%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>安装</h2>\n<p>React v16.0.0 已可通过 npm 进行安装。</p>\n<p>通过 Yarn 安装 React 16，执行：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-bash"><code class="gatsby-code-bash">yarn add react@^16.0.0 react-dom@^16.0.0\n</code></pre>\n      </div>\n<p>通过 npm 安装 React 16，执行：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-bash"><code class="gatsby-code-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react@^16.0.0 react-dom@^16.0.0\n</code></pre>\n      </div>\n<p>我们也通过CDN提供了 UMD 方式构建的 React：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-html"><code class="gatsby-code-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react@16/umd/react.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/react-dom@16/umd/react-dom.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n      </div>\n<p><a href="/docs/installation.html">关于安装说明的细节</a>可以查看文档。</p>\n<h2 id="升级"><a href="#%E5%8D%87%E7%BA%A7" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>升级</h2>\n<p>尽管 React 16 包含了重大的内部变更，就升级而言，你可以认为这和其他主要版本的 React 发布类似。自今年早些时候我们已经用 React 16 服务了 Facebook 和 Messenger.com的用户，同时我们发布几个 beta 版本和 补丁 版本以解决额外的问题。除了一些小的意外，<strong>若你的应用运行在 15.6 版本上且没有任何警告，那么其应该也能够在 16 下正常工作。</strong></p>\n<h3 id="新的弃用"><a href="#%E6%96%B0%E7%9A%84%E5%BC%83%E7%94%A8" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>新的弃用</h3>\n<p>保留（Hydrating）服务端渲染的容器现在有了更清晰的 API 定义。若你想重用服务端渲染的 HTML，使用 <a href="/docs/react-dom.html#hydrate"><code class="gatsby-code-text">ReactDOM.hydrate</code></a> 而不是 <code class="gatsby-code-text">ReactDOM.render</code>。若你只是想做客户端渲染则继续使用 <code class="gatsby-code-text">ReactDOM.render</code> 即可。</p>\n<h3 id="react-附加套件"><a href="#react-%E9%99%84%E5%8A%A0%E5%A5%97%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React 附加套件</h3>\n<p>如之前宣称，我们<a href="/blog/2017/04/07/react-v15.5.0.html#discontinuing-support-for-react-addons">不再为 React Addons 增加支持</a>。我们期望每个附加套件（除<code class="gatsby-code-text">react-addons-perf</code>；查看之前）能够在可见的未来中继续工作，但我们不会再发布额外的更新。</p>\n<p>关于<a href="/blog/2017/04/07/react-v15.5.0.html#discontinuing-support-for-react-addons">如何迁移的建议</a>可以参考之前的博客。</p>\n<p><code class="gatsby-code-text">react-addons-perf</code> 无法在React 16中继续工作。在之后我们可能会发布一个新版工具。同时，你可以<a href="/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab">使用你的浏览器性能工具来测量 React 组件</a>。</p>\n<h3 id="更新"><a href="#%E6%9B%B4%E6%96%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更新</h3>\n<p>React 16 包含了一系列小的变革。这些变革仅会影响一些不常用的示例，而我们并不希望他们会干扰大多数应用。</p>\n<ul>\n<li>React 15 已对使用 <code class="gatsby-code-text">unstable_handleError</code> 进行了限制，不再为错误边界提供文档支持。该方法已重命名为 <code class="gatsby-code-text">componentDidCatch</code>。你可以使用 codemod来<a href="https://github.com/reactjs/react-codemod#error-boundaries">自动地迁移代码到新的 API</a>。</li>\n<li>若在生命周期方法内部调用 <code class="gatsby-code-text">ReactDOM.render</code> 和 <code class="gatsby-code-text">ReactDOM.unstable_renderIntoContainer</code> ，则其返回空。为使其继续工作，你可以使用 <a href="https://github.com/facebook/react/issues/10309#issuecomment-318433235">portals</a> 或 <a href="https://github.com/facebook/react/issues/10309#issuecomment-318434635">refs</a>。</li>\n<li>\n<p><code class="gatsby-code-text">setState</code>:</p>\n<ul>\n<li>通过 null 调用 <code class="gatsby-code-text">setState</code> 不再触发更新。这允许你确定在更新函数里你是否想要重新渲染。</li>\n<li>在 render 方法里调用 <code class="gatsby-code-text">setState</code> 会触发更新。这不同于之前。无论如何，你不应该在 render 里调用 setState。</li>\n<li><code class="gatsby-code-text">setState</code> 回调函数（第二个参数）现在会在 <code class="gatsby-code-text">componentDidMount</code> / <code class="gatsby-code-text">componentDidUpdate</code>之后立刻触发，而非等到所有组件都已渲染。</li>\n</ul>\n</li>\n<li>当使用 <code class="gatsby-code-text">&lt;B /&gt;</code> 来替换 <code class="gatsby-code-text">&lt;A /&gt;</code>，<code class="gatsby-code-text">B.componentWillMount</code> 现在会在 <code class="gatsby-code-text">A.componentWillUnmount</code> 之前触发。之前，在某些情况下，<code class="gatsby-code-text">A.componentWillUnmount</code> 会立刻触发。</li>\n<li>之前，改变组件的引用总会导致在组件渲染之前解除引用。现在当修改 DOM 节点时，我们将引用的调整置后。</li>\n<li>重渲到一个并非由 React 修改的容器里的方式并不安全。这在之前某些情况能够工作但 React 不再支持。现在我们在这一情况下会触发一个警告。你应该清理你组件树中使用 <code class="gatsby-code-text">ReactDOM.unmountComponentAtNode</code> 的组件。<a href="https://github.com/facebook/react/issues/10294#issuecomment-318820987">查看这一例子。</a></li>\n<li><code class="gatsby-code-text">componentDidUpdate</code> 生命周期方法将不再传递 <code class="gatsby-code-text">prevContext</code> 参数。（查看 <a href="https://github.com/facebook/react/issues/8631">#8631</a>）</li>\n<li>浅渲染器不再调用 <code class="gatsby-code-text">componentDidUpdate</code> 因为 DOM 引用并不可用。这也和 <code class="gatsby-code-text">componentDidMount</code> 保持一致（之前的版本亦不会调用 <code class="gatsby-code-text">componentDidMount</code> ）。</li>\n<li>浅渲染器不再实现 <code class="gatsby-code-text">unstable_batchedUpdates</code></li>\n</ul>\n<h3 id="包"><a href="#%E5%8C%85" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>包</h3>\n<ul>\n<li>不再有 <code class="gatsby-code-text">react/lib/*</code> 和 <code class="gatsby-code-text">react-dom/lib/*</code>。即使在 CommonJS 环境下，React 和 ReactDOM也会预编译为单文件（“扁平包（flat bundles）”）。若你之前依赖于文档未标明的 React 内部方法，则他们不再有效，可以在新的 issue 说明你的具体情况，同时我们也会尽可能为你提供迁移建议。</li>\n<li>不再有 <code class="gatsby-code-text">react-with-addons.js</code> 构建包。所有兼容的附加组件都单独地在 npm 上发布，若你需要，也对应有单文件的浏览器版本。</li>\n<li>在 15.x 介绍的弃用已经从核心 package 中移除。<code class="gatsby-code-text">React.createClass</code> 可用 <code class="gatsby-code-text">create-react-class</code> 来替代，<code class="gatsby-code-text">React.PropTypes</code> 用 <code class="gatsby-code-text">prop-types</code> 来代替，<code class="gatsby-code-text">react-dom-factories</code> 来代替 <code class="gatsby-code-text">React.DOM</code>，<code class="gatsby-code-text">react-dom/test-utils</code> 来代替 <code class="gatsby-code-text">react-addons-test-utils</code> 以及浅渲染器可用 <code class="gatsby-code-text">react-test-renderer/shallow</code>。 查看 <a href="https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html">15.5.0</a> 和 <a href="https://facebook.github.io/react/blog/2017/06/13/react-v15.6.0.html">15.6.0</a> 的博客文章来了解代码迁移和自动化代码修改（codemods）的建议。</li>\n<li>\n<p>对于单文件的浏览器构建版本名字和路径做了调整以强调开发和生产版本之前的差异。例如：</p>\n<ul>\n<li><code class="gatsby-code-text">react/dist/react.js</code> → <code class="gatsby-code-text">react/umd/react.development.js</code></li>\n<li><code class="gatsby-code-text">react/dist/react.min.js</code> → <code class="gatsby-code-text">react/umd/react.production.min.js</code></li>\n<li><code class="gatsby-code-text">react-dom/dist/react-dom.js</code> → <code class="gatsby-code-text">react-dom/umd/react-dom.development.js</code></li>\n<li><code class="gatsby-code-text">react-dom/dist/react-dom.min</code>.js → <code class="gatsby-code-text">react-dom/umd/react-dom.production.min.js</code></li>\n</ul>\n</li>\n</ul>\n<h2 id="javascript环境要求"><a href="#javascript%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JavaScript环境要求</h2>\n<p>React 16 依赖于集合类型 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a>。若你要支持老式的可能未提供原生支持的浏览器和设备（例如 IE &#x3C; 11），考虑在你的应用库中包含一个全局的 polyfill，例如 <a href="https://github.com/zloirock/core-js">core-js</a> 或 <a href="https://babeljs.io/docs/usage/polyfill/">babel-polyfill</a>。</p>\n<p>一个使用 core-js 支持老版浏览器的 React 16 polyfill 环境大致如下：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">import</span> <span class="token string">\'core-js/es6/map\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/es6/set\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>React 也依赖于 <code class="gatsby-code-text">requestAnimationFrame</code> （甚至包括测试环境）。一个在测试环境下的简单 shim 如下：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx">global<span class="token punctuation">.</span><span class="token function-variable function">requestAnimationFrame</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2 id="感谢"><a href="#%E6%84%9F%E8%B0%A2" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>感谢</h2>\n<p>一如既往，此次发布没有开源社区贡献将无法完成。感谢每一位提bug，开PR，回答问题，编写文档以及其他有所贡献的人们！</p>\n<p>尤其感谢我们的核心贡献者，尤其是在过去几周的预发布周期的卓越贡献：<a href="https://twitter.com/aweary">Brandon Dail</a>，<a href="https://twitter.com/monasticpanic">Jason Quense</a>，<a href="https://twitter.com/natehunzaker">Nathan Hunzaker</a>，和 <a href="https://twitter.com/xander76">Sasha Aickin</a>。</p>',excerpt:"我们非常激动地宣布 React v16.0 发布了！这些变更包含了一些存在已久的特性，包括 碎片（fragments） ， 错误边界 ， portals ，支持 自定义 DOM 属性 ，提升 服务端渲染 以及 减小库的大小 。 新的渲染返回类型：碎片和字符串 现在你可以从组件的渲染方法中返回一个包含元素的数组。类似于其他数组，但你需要为每一个元素添加key以避免警告： 未来，我们很可能会给 JSX 增加一种不需要 key 的特殊碎片语法。 我们也添加了对返回字符串的支持： 查看完整的支持的返回类型列表 。 更好的错误处理 之前，渲染时的运行错误会使得 React 进入错误状态，生成加密的错误信息并需要页面进行刷新。为处理这一问题， React 16 使用了更具弹性的错误处理策略。默认情况下，若错误在组件内的渲染或生命周期方法被抛出，整个组件从根开始都不会渲染。这阻止了错误信息的显示。然而，其也可能不是理想的用户体验。 你可以使用错误边界，而非每次出现错误时卸载整个应用。错误边界是用以在子树内部捕获错误并在其位置展示回退 UI 的特殊组件。可以认为错误边界类似于 try-catch…",frontmatter:{title:"React v16.0",next:null,prev:null,author:[{frontmatter:{name:"Andrew Clark",url:"https://twitter.com/acdlite"}}]},fields:{date:"September 26, 2017",path:"blog/2017-09-26-react-v16.0.md",slug:"/blog/2017/09/26/react-v16.0.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"React v16.7: No, This Is Not the One With Hooks"},fields:{slug:"/blog/2018/12/19/react-v-16-7.html"}}},{node:{frontmatter:{title:"React 16.x Roadmap"},fields:{slug:"/blog/2018/11/27/react-16-roadmap.html"}}},{node:{frontmatter:{title:"React Conf recap: Hooks, Suspense, and Concurrent Rendering"},fields:{slug:"/blog/2018/11/13/react-conf-recap.html"}}},{node:{frontmatter:{title:"React v16.6.0: lazy, memo and contextType"},fields:{slug:"/blog/2018/10/23/react-v-16-6.html"}}},{node:{frontmatter:{title:"Create React App 2.0: Babel 7, Sass, and More"},fields:{slug:"/blog/2018/10/01/create-react-app-v2.html"}}},{node:{frontmatter:{title:"Introducing the React Profiler"},fields:{slug:"/blog/2018/09/10/introducing-the-react-profiler.html"}}},{node:{frontmatter:{title:"React v16.4.2: Server-side vulnerability fix"},fields:{slug:"/blog/2018/08/01/react-v-16-4-2.html"}}},{node:{frontmatter:{title:"You Probably Don't Need Derived State"},fields:{slug:"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}},{node:{frontmatter:{title:"React v16.4.0: Pointer Events"},fields:{slug:"/blog/2018/05/23/react-v-16-4.html"}}},{node:{frontmatter:{title:"React v16.3.0: New lifecycles and context API"},fields:{slug:"/blog/2018/03/29/react-v-16-3.html"}}}]}},pathContext:{slug:"/blog/2017/09/26/react-v16.0.html"}}}});
//# sourceMappingURL=path---blog-2017-09-26-react-v-16-0-html-94c104cb9890cd6415ee.js.map